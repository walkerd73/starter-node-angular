"use strict";var path,node_ssh,ssh,fs,cmd=require("node-cmd");function main(){console.log("Deployment started."),sshConnect()}function installPM2(){return ssh.execCommand("sudo npm install pm2 -g",{cwd:"/home/ubuntu"})}function transferProjectToRemote(o,r){return ssh.putDirectory("../starter-node-angular","/home/ubuntu/starter-node-angular-temp",{recursive:!0,concurrency:1,validate:function(e){var t=path.basename(e);return"."!==t.substr(0,1)&&"node_modules"!==t},tick:function(e,t,n){n?(o.push(e),console.log("failed.push: "+e)):(r.push(e),console.log("successful.push: "+e))}})}function createRemoteTempFolder(){return ssh.execCommand("rm -rf starter-node-angular-temp && mkdir starter-node-angular-temp",{cwd:"/home/ubuntu"})}function stopRemoteServices(){return ssh.execCommand("pm2 stop all && sudo service mongod stop",{cwd:"/home/ubuntu"})}function updateRemoteApp(){return ssh.execCommand("mkdir starter-node-angular && cp -r starter-node-angular-temp/* starter-node-angular/ && rm -rf starter-node-angular-temp",{cwd:"/home/ubuntu"})}function restartRemoteServices(){return ssh.execCommand("cd starter-node-angular && sudo service mongod start && pm2 start app.js",{cwd:"/home/ubuntu"})}function sshConnect(){console.log("Connecting to the server..."),ssh.connect({host:"34.201.129.83",username:"ubuntu",privateKey:"final-project-key.pem"}).then(function(){return console.log("SSH Connection established."),console.log("Installing PM2..."),installPM2()}).then(function(){return console.log("Creating `starter-node-angular-temp` folder new."),createRemoteTempFolder()}).then(function(e){return e.stdout&&console.log("STDOUT: "+e.stdout),e.stderr?(console.log("STDERR: "+e.stderr),Promise.reject(e.stderr)):(console.log("Transferring files to remote server..."),transferProjectToRemote([],[]))}).then(function(e){return e?(console.log("Stopping remote services."),stopRemoteServices()):Promise.reject(failed.join(", "))}).then(function(e){return e?(console.log("Updating remote app."),updateRemoteApp()):Promise.reject(failed.join(", "))}).then(function(e){return e?(console.log("Restarting remote services..."),restartRemoteServices()):Promise.reject(failed.join(", "))}).then(function(){console.log("DEPLOYMENT COMPLETE!"),process.exit(0)}).catch(function(e){console.error(e),process.exit(1)})}fs=require("fs"),path=require("path"),node_ssh=require("node-ssh"),ssh=new node_ssh,main();